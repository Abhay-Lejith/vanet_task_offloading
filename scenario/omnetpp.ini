[General]
result-dir = /tmp
cmdenv-express-mode = false
**.cmdenv-log-level = info

ned-path = .
image-path = ../../images

network = SerpentineScenario

##########################################################
#            Simulation parameters                       #
##########################################################
debug-on-errors = true
print-undisposed = true

sim-time-limit = 400s

**.scalar-recording = true
**.vector-recording = true

*.playgroundSizeX = 3500m
*.playgroundSizeY = 3500m
*.playgroundSizeZ = 50m


##########################################################
# Annotation parameters                                  #
##########################################################
*.annotations.draw = true

##########################################################
# Obstacle parameters                                    #
##########################################################
# *.obstacles.obstacles = xmldoc("config.xml", "//AnalogueModel[@type='SimpleObstacleShadowing']/obstacles")

##########################################################
#            TraCIScenarioManager parameters             #
##########################################################
*.manager.updateInterval = 0.1s
*.manager.host = "localhost"
*.manager.autoShutdown = true
*.manager.configFile = "serpentine.sumo.cfg"
*.manager.command = "sumo"
*.manager.moduleType = "serpentine.Car"

##########################################################
#            11p specific parameters                     #
#                                                        #
#                    NIC-Settings                        #
##########################################################
*.connectionManager.sendDirect = true
*.connectionManager.maxInterfDist = 2600m
*.connectionManager.drawMaxIntfDist = false

*.**.nic.mac1609_4.useServiceChannel = false

*.**.nic.mac1609_4.txPower = 20mW
*.**.nic.mac1609_4.bitrate = 6Mbps
*.**.nic.phy80211p.minPowerLevel = -110dBm

*.**.nic.phy80211p.useNoiseFloor = true
*.**.nic.phy80211p.noiseFloor = -98dBm

*.**.nic.phy80211p.decider = xmldoc("config.xml")
*.**.nic.phy80211p.analogueModels = xmldoc("config.xml")
*.**.nic.phy80211p.usePropagationDelay = true

*.**.nic.phy80211p.antenna = xmldoc("antenna.xml", "/root/Antenna[@id='monopole']")
*.node[*].nic.phy80211p.antennaOffsetY = 0 m
*.node[*].nic.phy80211p.antennaOffsetZ = 1.895 m


##########################################################
#            VLC specific parameters                     #
#                                                        #
#                    NIC-Settings                        #
##########################################################
*.**.nicVlc*.phyVlc.collectCollisionStatistics = true
*.**.nicVlc*.phyVlc.usePropagationDelay = true
*.**.nicVlc*.phyVlc.useNoiseFloor = true
*.**.nicVlc*.phyVlc.noiseFloor = -110dBm
*.**.nicVlc*.phyVlc.interModuleDistance = 1.5m
*.**.nicVlc*.phyVlc.photodiodeId = "PDA100A"
*.**.nicVlc*.phyVlc.analogueModels = xmldoc("config-vlc.xml")
*.**.nicVlc*.phyVlc.decider = xmldoc("config-vlc.xml")
*.**.nicVlc*.phyVlc.minPowerLevel = -114dBm
*.**.nicVlc*.phyVlc.bitrate = 1Mbps

*.**.nicVlcHead.phyVlc.antennaOffsetX = 2m
*.**.nicVlcHead.phyVlc.antennaOffsetZ = 0.6m
*.**.nicVlcHead.phyVlc.photodiodeGroundOffsetZ = 0.6m
*.**.nicVlcHead.phyVlc.radiationPatternId = "LbSedan1"
*.**.nicVlcHead.phyVlc.antenna = xml("<root><Antenna type=\"HeadlightAntenna\" id=\"HeadlightAntenna\"></Antenna></root>")

*.**.nicVlcTail.phyVlc.antennaOffsetX = -2m
*.**.nicVlcTail.phyVlc.antennaOffsetZ = 0.8m
*.**.nicVlcTail.phyVlc.photodiodeGroundOffsetZ = 0.6m
*.**.nicVlcTail.phyVlc.radiationPatternId = "DefaultRear"
*.**.nicVlcTail.phyVlc.antenna = xml("<root><Antenna type=\"TaillightAntenna\" id=\"TaillightAntenna\"></Antenna></root>")

##########################################################
#                      App Layer                         #
##########################################################
*.node[*].applType = "SerpentineApp"
*.node[*].appl.headerLength = 80 bit
*.node[*].appl.sendBeacons = true
*.node[*].appl.dataOnSch = false
*.node[*].appl.beaconInterval = 0.1s

# RSU application configuration (avoid interactive prompt at startup)
*.rsu[*].applType = "TraCIDemoRSU11p"
*.rsu[0].mobility.x = 500
*.rsu[0].mobility.y = 500
*.rsu[0].mobility.z = 3
*.rsu[1].mobility.x = 1500
*.rsu[1].mobility.y = 1500
*.rsu[1].mobility.z = 3
*.rsu[2].mobility.x = 2500
*.rsu[2].mobility.y = 2500
*.rsu[2].mobility.z = 3

##########################################################
#                      Mobility                          #
##########################################################
*.node[*].veinsmobility.x = 0
*.node[*].veinsmobility.y = 0
*.node[*].veinsmobility.z = 0
*.node[*].veinsmobility.setHostSpeed = false
*.node[*0].veinsmobility.accidentCount = 0

##########################################################
#                      Splitter                          #
##########################################################
*.node[*].splitterType = "serpentine.GymSplitter"
*.node[*].splitter.desiredHeadway = uniform(0.5s, 5s)

##########################################################
#                   GymConnection                        #
##########################################################
*.gym_connection.action_space = "gym.spaces.Discrete(8)"
*.gym_connection.observation_space = "gym.spaces.Box(low=np.array([-np.inf, -np.inf, -1, -1], dtype=np.float32), high=np.array([np.inf, np.inf, 1, 1], dtype=np.float32))"


[Config Default]

[Config EnvVars]
# pull host and port from env vars
*.node[*].splitter.gymHost = ""
*.node[*].splitter.gymPort = -1

[Config StraightRoad]
description = "Straight road with 2 cars and RSUs"
# Use the simple straight SUMO network
*.manager.configFile = "straight.sumo.cfg"
*.manager.command = "sumo"
sim-time-limit = 100s

# Two cars managed by SUMO: leader and follower
# Use the plain Splitter (no Gym) to avoid mixing 4-D and 7-D observations
*.manager.moduleType = "serpentine.Car"
*.node[*].splitterType = "org.car2x.veinsvlc.Splitter"

# RSU settings: create 3 RSUs along the road at x=200,500,800
*.rsu[0].mobility.x = 200
*.rsu[0].mobility.y = 0
*.rsu[0].mobility.z = 3
*.rsu[1].mobility.x = 500
*.rsu[1].mobility.y = 0
*.rsu[1].mobility.z = 3
*.rsu[2].mobility.x = 800
*.rsu[2].mobility.y = 0
*.rsu[2].mobility.z = 3

# RSU applications
*.rsu[*].applType = "TraCIDemoRSU11p"
*.rsu[*].appl.headerLength = 80 bit
*.rsu[*].appl.sendBeacons = false
*.rsu[*].appl.dataOnSch = false
*.rsu[*].appl.beaconInterval = 1s
*.rsu[*].appl.beaconUserPriority = 7
*.rsu[*].appl.dataUserPriority = 5

# Disable VLC specifics for simplicity in this scenario (optional)
*.**.nicVlc*.phyVlc.collectCollisionStatistics = false
*.**.nicVlc*.phyVlc.usePropagationDelay = false
*.**.nicVlc*.phyVlc.useNoiseFloor = false

# Make GymConnection read env vars so sim doesnâ€™t hang if server absent
*.gym_connection.host = "127.0.0.1"
*.gym_connection.port = 5555

# Use StraightScenario network with straight offloading spaces
network = StraightScenario
*.gym_connection.action_space = "gym.spaces.Discrete(4)"  # 0=no offload, 1=RSU0, 2=RSU1, 3=RSU2
*.gym_connection.observation_space = "gym.spaces.Box(low=-np.inf*np.ones(7, dtype=np.float32), high=np.inf*np.ones(7, dtype=np.float32))"  # [speed, d0,d1,d2, bw0,bw1,bw2]
