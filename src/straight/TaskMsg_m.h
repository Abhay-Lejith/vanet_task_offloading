//
// Generated file, do not edit! Created by nedtool 5.7 from straight/TaskMsg.msg.
//

#ifndef __STRAIGHT_TASKMSG_M_H
#define __STRAIGHT_TASKMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace straight {

/**
 * Class generated from <tt>straight/TaskMsg.msg:4</tt> by nedtool.
 * <pre>
 * // Message representing a task offload request from a vehicle to an RSU
 * message TaskRequest
 * {
 *     string vehicleId;
 *     int64 inputBytes;   // input data size in bytes
 *     int64 outputBytes;  // output data size in bytes
 *     int64 cycles;       // total CPU cycles required
 * }
 * </pre>
 */
class TaskRequest : public ::omnetpp::cMessage
{
  protected:
    ::omnetpp::opp_string vehicleId;
    int64_t inputBytes;
    int64_t outputBytes;
    int64_t cycles;

  private:
    void copy(const TaskRequest& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TaskRequest&);

  public:
    TaskRequest(const char *name=nullptr, short kind=0);
    TaskRequest(const TaskRequest& other);
    virtual ~TaskRequest();
    TaskRequest& operator=(const TaskRequest& other);
    virtual TaskRequest *dup() const override {return new TaskRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getVehicleId() const;
    virtual void setVehicleId(const char * vehicleId);
    virtual int64_t getInputBytes() const;
    virtual void setInputBytes(int64_t inputBytes);
    virtual int64_t getOutputBytes() const;
    virtual void setOutputBytes(int64_t outputBytes);
    virtual int64_t getCycles() const;
    virtual void setCycles(int64_t cycles);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TaskRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TaskRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>straight/TaskMsg.msg:12</tt> by nedtool.
 * <pre>
 * // Message representing task completion notification back to the vehicle
 * message TaskDone
 * {
 *     string vehicleId;
 *     int64 inputBytes;
 *     int64 outputBytes;
 *     double totalTime;   // total end-to-end time experienced for this task (s)
 * }
 * </pre>
 */
class TaskDone : public ::omnetpp::cMessage
{
  protected:
    ::omnetpp::opp_string vehicleId;
    int64_t inputBytes;
    int64_t outputBytes;
    double totalTime;

  private:
    void copy(const TaskDone& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TaskDone&);

  public:
    TaskDone(const char *name=nullptr, short kind=0);
    TaskDone(const TaskDone& other);
    virtual ~TaskDone();
    TaskDone& operator=(const TaskDone& other);
    virtual TaskDone *dup() const override {return new TaskDone(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getVehicleId() const;
    virtual void setVehicleId(const char * vehicleId);
    virtual int64_t getInputBytes() const;
    virtual void setInputBytes(int64_t inputBytes);
    virtual int64_t getOutputBytes() const;
    virtual void setOutputBytes(int64_t outputBytes);
    virtual double getTotalTime() const;
    virtual void setTotalTime(double totalTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TaskDone& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TaskDone& obj) {obj.parsimUnpack(b);}

} // namespace straight

#endif // ifndef __STRAIGHT_TASKMSG_M_H

